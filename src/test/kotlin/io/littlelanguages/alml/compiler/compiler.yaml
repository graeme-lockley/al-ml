- scenario:
    name: "Greetings"
    tests:
      - name: "Hello 42"
        input: |
          (println 42)
        output: |
          42
      - name: "Hello #t"
        input: |
          (println #t)
        output: |
          #t
      - name: "Hello ()"
        input: |
          (println ())
        output: |
          ()
      - name: "Hello (pair 1 (pair 2 3)))"
        input: |
          (println (pair 1 (pair 2 3)))
        output: |
          (1 2 . 3)
      - name: "Hello World"
        input: |
          (println "Hello World")
        output: |
          Hello World
- scenario:
    name: "Expressions"
    tests:
      - scenario:
          name: Literal Value
          tests:
            - name: Boolean
              input: |
                (println #t);
                (println #f)
              output: |
                #t
                #f
            - name: Integer
              input: |
                (println 123);
                (println -987)
              output: |
                123
                -987
            - name: String
              input: |
                (println "Hello\nWorld");
                (println "Bye\nbye\nlove")
              output: |
                Hello
                World
                Bye
                bye
                love
            - name: ()
              input: |
                (println ())
              output: |
                ()
      - scenario:
          name: Operators
          tests:
            - name: plus
              input: |
                (println 1 + 2);
                (println 1 + 2 + 3 + 4 + 5 + 6)
              output: |
                3
                21
            - name: minus
              input: |
                (println 1 - 2);
                (println 1 - 2 - 3 - 4 - 5 - 6)
              output: |
                -1
                -19
            - name: star
              input: |
                (println 3 * 4);
                (println 1 * 2 * 3 * 4 * 5 * 6)
              output: |
                12
                720
            - name: slash
              input: |
                (println 4 / 2);
                (println 500 / 50 / 2)
              output: |
                2
                5
            - name: slash by zero
              input: |
                (println 500 / 50 / 2);
                (println 500 / 50 / 0 / 2)
              output: |
                5
                Unhandled Exception: (DivideByZero ./test.mlsp 2)
            - scenario:
                name: equals
                tests:
                  - name: ()
                    input: |
                      (println () == ());
                      (println () == #t);
                      (println () == 123);
                      (println () == "hello");
                      (println () == (pair 1 2))
                    output: |
                      #t
                      #f
                      #f
                      #f
                      #f
                  - name: boolean
                    input: |
                      (println #t == ());
                      (println #t == #t);
                      (println #t == #f);
                      (println #t == 123);
                      (println #t == "hello");
                      (println #t == (pair 1 2))
                    output: |
                      #f
                      #t
                      #f
                      #f
                      #f
                      #f
                  - name: integer
                    input: |
                      (println 123 == ());
                      (println 123 == #t);
                      (println 123 == 123);
                      (println 456 == 123);
                      (println 123 == "hello");
                      (println 123 == (pair 1 2))
                    output: |
                      #f
                      #f
                      #t
                      #f
                      #f
                      #f
                  - name: string
                    input: |
                      (println "hello" == ());
                      (println "hello" == #t);
                      (println "hello" == 123);
                      (println "hello" == "hello");
                      (println "hello" == "world");
                      (println "hello" == (pair 1 2))
                    output: |
                      #f
                      #f
                      #f
                      #t
                      #f
                      #f
                  - name: pair
                    input: |
                      (println (pair 1 2) == ());
                      (println (pair 1 2) == #t);
                      (println (pair 1 2) == 123);
                      (println (pair 1 2) == "hello");
                      (println (pair 1 2) == (pair 1 2));
                      (println (pair 1 3) == (pair 1 2))
                    output: |
                      #f
                      #f
                      #f
                      #f
                      #t
                      #f
            - scenario:
                name: not equals
                tests:
                  - name: ()
                    input: |
                      (println () != ());
                      (println () != #t);
                      (println () != 123);
                      (println () != "hello");
                      (println () != (pair 1 2))
                    output: |
                      #f
                      #t
                      #t
                      #t
                      #t
                  - name: boolean
                    input: |
                      (println #t != ());
                      (println #t != #t);
                      (println #t != #f);
                      (println #t != 123);
                      (println #t != "hello");
                      (println #t != (pair 1 2))
                    output: |
                      #t
                      #f
                      #t
                      #t
                      #t
                      #t
                  - name: integer
                    input: |
                      (println 123 != ());
                      (println 123 != #t);
                      (println 123 != 123);
                      (println 456 != 123);
                      (println 123 != "hello");
                      (println 123 != (pair 1 2))
                    output: |
                      #t
                      #t
                      #f
                      #t
                      #t
                      #t
                  - name: string
                    input: |
                      (println "hello" != ());
                      (println "hello" != #t);
                      (println "hello" != 123);
                      (println "hello" != "hello");
                      (println "hello" != "world");
                      (println "hello" != (pair 1 2))
                    output: |
                      #t
                      #t
                      #t
                      #f
                      #t
                      #t
                  - name: pair
                    input: |
                      (println (pair 1 2) != ());
                      (println (pair 1 2) != #t);
                      (println (pair 1 2) != 123);
                      (println (pair 1 2) != "hello");
                      (println (pair 1 2) != (pair 1 2));
                      (println (pair 1 3) != (pair 1 2))
                    output: |
                      #t
                      #t
                      #t
                      #t
                      #f
                      #t
            - scenario:
                name: less than
                tests:
                  - name: boolean
                    input: |
                      (println #f < #f);
                      (println #f < #t);
                      (println #t < #f);
                      (println #t < #t)
                    output: |
                      #f
                      #t
                      #f
                      #f
                  - name: integer
                    input: |
                      (println 1 < 1);
                      (println 1 < 2);
                      (println 2 < 1)
                    output: |
                      #f
                      #t
                      #f
                  - name: string
                    input: |
                      (println "a" < "a");
                      (println "a" < "b");
                      (println "b" < "a")
                    output: |
                      #f
                      #t
                      #f
            - scenario:
                name: less equal
                tests:
                  - name: boolean
                    input: |
                      (println #f <= #f);
                      (println #f <= #t);
                      (println #t <= #f);
                      (println #t <= #t)
                    output: |
                      #t
                      #t
                      #f
                      #t
                  - name: integer
                    input: |
                      (println 1 <= 1);
                      (println 1 <= 2);
                      (println 2 <= 1)
                    output: |
                      #t
                      #t
                      #f
                  - name: string
                    input: |
                      (println "a" <= "a");
                      (println "a" <= "b");
                      (println "b" <= "a")
                    output: |
                      #t
                      #t
                      #f
            - scenario:
                name: greater than
                tests:
                  - name: boolean
                    input: |
                      (println #f > #f);
                      (println #f > #t);
                      (println #t > #f);
                      (println #t > #t)
                    output: |
                      #f
                      #f
                      #t
                      #f
                  - name: integer
                    input: |
                      (println 1 > 1);
                      (println 1 > 2);
                      (println 2 > 1)
                    output: |
                      #f
                      #f
                      #t
                  - name: string
                    input: |
                      (println "a" > "a");
                      (println "a" > "b");
                      (println "b" > "a")
                    output: |
                      #f
                      #f
                      #t
            - scenario:
                name: greater equal
                tests:
                  - name: boolean
                    input: |
                      (println #f >= #f);
                      (println #f >= #t);
                      (println #t >= #f);
                      (println #t >= #t)
                    output: |
                      #t
                      #f
                      #t
                      #t
                  - name: integer
                    input: |
                      (println 1 >= 1);
                      (println 1 >= 2);
                      (println 2 >= 1)
                    output: |
                      #t
                      #f
                      #t
                  - name: string
                    input: |
                      (println "a" >= "a");
                      (println "a" >= "b");
                      (println "b" >= "a")
                    output: |
                      #t
                      #f
                      #t
      - scenario:
          name: Forms
          tests:
            - scenario:
                name: if
                tests:
                  - name: (if v1 v2)
                    input: |
                      (println if 1 == 1 -> 2);
                      (println if 0 == 1 -> 2)
                    output: |
                      2
                      ()
                  - name: (if v1 v2 v2)
                    input: |
                      (println if 1 == 1 -> 2 else 3);
                      (println if 0 == 1 -> 2 else 3);
                      (println if 4 == 7 -> 1 | 3 == 2 -> 2 else 3);
                      (println if 4 == 7 -> 1 | 3 == 2 -> 2)
                    output: |
                      2
                      3
                      3
                      ()
      - scenario:
          name: Procedures
          tests:
            - name: pair
              input: |
                (println (pair 1 2));
                (println (pair 1 (pair 2 (pair 3 ()))))
              output: |
                (1 . 2)
                (1 2 3)
            - name: car
              input: |
                (println (car (pair 1 2)));
                (println (car (pair 1 (pair 2 (pair 3 ())))))
              output: |
                1
                1
            - name: car error
              input: |
                (println (car ()))
              output: |
                Unhandled Exception: ((EmptyList (reason . Attempt to call car on empty list)) ./test.mlsp 1)
            - name: cdr
              input: |
                (println (cdr (pair 1 2)));
                (println (cdr (pair 1 (pair 2 ()))));
                (println (cdr (pair 1 (pair 2 (pair 3 ())))))
              output: |
                2
                (2)
                (2 3)
            - name: cdr error
              input: |
                (println (cdr ()))
              output: |
                Unhandled Exception: ((EmptyList (reason . Attempt to call cdr on empty list)) ./test.mlsp 1)
            - name: null?
              input: |
                (println (null? ()));
                (println (null? #t));
                (println (null? 123));
                (println (null? "hello"));
                (println (null? (pair 1 2)))
              output: |
                #t
                #f
                #f
                #f
                #f
            - name: boolean?
              input: |
                (println (boolean? ()));
                (println (boolean? #t));
                (println (boolean? 123));
                (println (boolean? "hello"));
                (println (boolean? (pair 1 2)))
              output: |
                #f
                #t
                #f
                #f
                #f
            - name: integer?
              input: |
                (println (integer? ()));
                (println (integer? #t));
                (println (integer? 123));
                (println (integer? "hello"));
                (println (integer? (pair 1 2)))
              output: |
                #f
                #f
                #t
                #f
                #f
            - name: string?
              input: |
                (println (string? ()));
                (println (string? #t));
                (println (string? 123));
                (println (string? "hello"));
                (println (string? (pair 1 2)))
              output: |
                #f
                #f
                #f
                #t
                #f
            - name: pair?
              input: |
                (println (pair? ()));
                (println (pair? #t));
                (println (pair? 123));
                (println (pair? "hello"));
                (println (pair? (pair 1 2)))
              output: |
                #f
                #f
                #f
                #f
                #t
            - name: exit
              input: |
                let some-message = "This is my message";

                (exit some-message)
              output: |
                Unhandled Exception: ((Exit (message . This is my message)) ./test.mlsp 3)
- scenario:
    name: "Forms"
    tests:
      - scenario:
          name: "block"
          tests:
            - name: if
              input: |
                if #t ->
                  { (println "Hello")
                  ; (println "World")
                  }
              output: |
                Hello
                World
            - name: declaration
              input: |
                {  let x = 1
                ;  { let y = 2
                   }
                };

                (println x);
                (println y)
              output:
                - UnknownSymbolError:
                    name: x
                    location: "46:6:10"
                - UnknownSymbolError:
                    name: y
                    location: "59:7:10"
- scenario:
    name: "Declarations"
    tests:
      - name: "Toplevel value declaration"
        input: |
          let v1 = 1;
          let v2 = #t;
          let v3 = "Hello world";
          let v4 = ();
          let v5 = (pair 1 2);

          (println v1);
          (println v2);
          (println v3);
          (println v4);
          (println v5)
        output: |
          1
          #t
          Hello world
          ()
          (1 . 2)
      - name: "Toplevel procedure declaration"
        input: |
          let add a b = a + b;
          let minus a b = a - b;

          (println (minus 10 (add 1 2)))
        output: |
          7
      - name: "Const value in procedure declaration"
        input: |
          let double-sum a b = {
            let sum = a + b;

            sum + sum
          };

          (println (double-sum 1 2))
        output: |
          6
      - name: "Nested const forward value declaration"
        input: |
          let a = 9;

          let f = {
              let v1 = a;
              let a = 10;
              let v2 = a;
              (pair v1 v2)
          };

          (println f)
        output: |
          (9 . 10)
      - name: "Nested procedures with free variables"
        input: |
          let f a b = {
            let sum = a + b;

            let g x = {
                let sum2 = a + b + sum;

                sum2 + x
            };

            (g sum)
          };

          let nested a = {
            let a' = a + 1;

            let nested-nested b = {
              let b' = b + 1;

              let nested-nested-nested c = {
                let c' = c + 1;

                a + b + c + a' + b' + c'
              };

              (nested-nested-nested b')
            };

            (nested-nested a')
          };

          let range min max = 
            if min < max -> (pair min (range min + 1 max))
            else ();

          let max a b =
              if a < b -> b else a;

          let maxs items = {
              let max-helper largest rest =
                  if (null? rest) -> largest
                  else (max-helper (max largest (car rest)) (cdr rest));

              if (null? items) -> ()
              else (max-helper (car items) (cdr items))
          };

          let count items =
            if (null? items) -> 0
            else 1 + (count (cdr items));

          let sum items =
            if (null? items) -> 0
            else (car items) + (sum (cdr items));

          (println (f 1 2));
          (println (nested 1));

          let lots = (range 0 100000);

          (println "count: " (count lots));
          (println "sum: " (sum lots));
          (println "max: " (maxs lots))
        output: |
          9
          15
          count: 100000
          sum: 704982704
          max: 99999
      - name: "Nested if declarations"
        input: |
          let a = 1;
          let b = if a == 1 -> 2 else 3;
          let c =
            { let z = 4;
              z - 1
            };

          let d =
            { (println c);
              let c = a + b + 1;
              (println c);
               c
            };

          (println a);
          (println b);
          (println c);
          (println d)
        output: |
          3
          4
          1
          2
          3
          4

- scenario:
    name: "Higher-order procedures"
    tests:
      - name: "Declared without frame"
        input: |
          let plus a b =
              a + b;

          let plusp = plus;

          let inc a = (plus 1 a);
          let incp a = (plusp 1 a);

          (println (plus 1 2));
          (println (plusp 1 2));
          (println (inc 1));
          (println (incp 1))
        output: |
          3
          3
          2
          2
      - name: "Declared with frame"
        input: |
          let n0 a = {
            let a' = a + 1;
            let n0-nested b = {
              let b' = b + 1;
              let n0-nested-nested c = {
                let c' = c + 1;

                let n0-all _ =
                  (pair a (pair a' (pair b (pair b' (pair c (pair c' ()))))));

                n0-all
              };
              (n0-nested-nested b + 20)
            };
            (n0-nested a + 10)
          };

          let n1 a = {
            let a' = a + 1;
            let n1-nested b = {
              let b' = b + 1;

              let n1-all other =
                (pair a (pair a' (pair b (pair b' (pair other ())))));

              let n1-nested-nested c = {
                let c' = c + 1;

                n1-all
              };

              (n1-nested-nested b + 20)
            };
            (n1-nested a + 10)
          };

          (println ((n0 0) 0));
          (println ((n1 0) 30))
        output: |
          (0 1 10 11 30 31)
          (0 1 10 11 30)
      - name: "Up to 10 arguments without frame"
        input: |
          let f1 a1 =
            (println "f1: " a1);

          let f2 a1 a2 =
            (println "f2: " a1 ", " a2);

          let f3 a1 a2 a3 =
            (println "f3: " a1 ", " a2 ", " a3);

          let f4 a1 a2 a3 a4 =
            (println "f4: " a1 ", " a2 ", " a3 ", " a4);

          let f5 a1 a2 a3 a4 a5 =
            (println "f5: " a1 ", " a2 ", " a3 ", " a4 ", " a5);

          let f6 a1 a2 a3 a4 a5 a6 =
            (println "f6: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6);

          let f7 a1 a2 a3 a4 a5 a6 a7 =
            (println "f7: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7);

          let f8 a1 a2 a3 a4 a5 a6 a7 a8 =
            (println "f8: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8);

          let f9 a1 a2 a3 a4 a5 a6 a7 a8 a9 =
            (println "f9: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8 ", " a9);

          let f10 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 =
            (println "f10: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8 ", " a9 ", " a10);

          let v1 = f1;
          (v1 1);

          let v2 = f2;
          (v2 1 2);

          let v3 = f3;
          (v3 1 2 3);

          let v4 = f4;
          (v4 1 2 3 4);

          let v5 = f5;
          (v5 1 2 3 4 5);

          let v6 = f6;
          (v6 1 2 3 4 5 6);

          let v7 = f7;
          (v7 1 2 3 4 5 6 7);

          let v8 = f8;
          (v8 1 2 3 4 5 6 7 8);

          let v9 = f9;
          (v9 1 2 3 4 5 6 7 8 9);

          let v10 = f10;
          (v10 1 2 3 4 5 6 7 8 9 10)
        output: |
          f1: 1
          f2: 1, 2
          f3: 1, 2, 3
          f4: 1, 2, 3, 4
          f5: 1, 2, 3, 4, 5
          f6: 1, 2, 3, 4, 5, 6
          f7: 1, 2, 3, 4, 5, 6, 7
          f8: 1, 2, 3, 4, 5, 6, 7, 8
          f9: 1, 2, 3, 4, 5, 6, 7, 8, 9
          f10: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      - name: builtin procedure of fixed arity
        input: |
          let apair = pair;
          let result = (apair 1 (apair 2 (apair 3 ())));

          let apair? = pair?;

          (println result);
          (println (apair? result))
        output: |
          (1 2 3)
          #t
      - name: "builtin procedure of variable arity"
        input: |
          let call op = {
            (println (op));
            (println (op 10));
            (println (op 10 2));
            (println (op 10 2 3 4 5))
          };

          (call print);
          (call println)
        output: |
          ()
          10()
          102()
          102345()

          ()
          10
          ()
          102
          ()
          102345
          ()

      - name: "anonymous procedure without frame"
        input: |
          let range min max =
            if min < max -> (pair min (range min + 1 max))
            else ();

          let map p lst =
            if (null? lst) -> ()
            else (pair (p (car lst)) (map p (cdr lst)));

          let f = \n -> n + n;
          let values = (range 1 10);

          (println (map f values));
          (println (map \n -> n + n (range 1 10)))
        output: |
          (2 4 6 8 10 12 14 16 18)
          (2 4 6 8 10 12 14 16 18)
      - name: "anonymous procedure with frame"
        input: |
          let range min max =
            if min < max -> (pair min (range min + 1 max))
            else ();

          let filter p lst =
            if (null? lst) -> ()
            | (p (car lst)) -> (pair (car lst) (filter p (cdr lst)))
            else (filter p (cdr lst));

          let values = (range 1 10);

          let less-than n lst =
            (filter \v -> v < n lst);

          let limit = 5;
          (println (filter \n -> n < limit values));
          (println (less-than limit values))
        output: |
          (1 2 3 4)
          (1 2 3 4)
- scenario:
    name: "Exceptions"
    tests:
      - name: try-catch
        input: |
          let safe-divide a b =
            (try
              { let a2 = a + a;
                a2 / b
              }
              \c -> {
                (println c);
                0
              }
            );

          (println (safe-divide 10 2));
          (println (safe-divide 10 3));
          (println (safe-divide 10 0))
        output: |
          10
          6
          (DivideByZero ./test.mlsp 4)
          0
      - name: signal
        input: |
          let something a =
            if a == 0 -> (signal "Something")
             | a == 1 -> (signal "SomethingElse")
            else a * 2;

          (println (something 10));
          (try
            (something 1)
            \c -> (println "Caught exception: " c)
          );
          (println (something 0))
        output: |
          20
          Caught exception: (SomethingElse ./test.mlsp 3)
          Unhandled Exception: (Something ./test.mlsp 2)
      - name: signal with try-catch and signal
        input: |
          let something a =
            if a == 0 -> (signal "Something")
             | a == 1 -> (signal "SomethingElse")
            else a * 2;

          let fix-something a =
            (try
              (something a)
              \c -> if a == 0 -> 0 else (signal c)
            );

          (println (fix-something 10));
          (try
            (fix-something 1)
            \c -> (println "Caught exception: " c)
          );
          (println (fix-something 0))
        output: |
          20
          Caught exception: ((SomethingElse ./test.mlsp 3) ./test.mlsp 9)
          0
      - scenario:
          name: "Internal signals"
          tests:
            - name: "car on empty list"
              input: |
                (car ())
              output: |
                Unhandled Exception: ((EmptyList (reason . Attempt to call car on empty list)) ./test.mlsp 1)
            - name: "cdr on empty list"
              input: |
                (cdr ())
              output: |
                Unhandled Exception: ((EmptyList (reason . Attempt to call cdr on empty list)) ./test.mlsp 1)
            - name: "too many arguments on native procedure"
              input: |
                let p a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 =
                  "cool";

                let v = p
              output: |
                Unhandled Exception: ((InternalError (reason . UnableToWrapNative) (number-of-arguments . 20)) ./test.mlsp 4)
            - name: "argument count mismatch"
              input: |
                let add m n = m + n;

                let v = add;

                (v 1 2 3)
              output: |
                Unhandled Exception: ((ArgumentCountMismatch (reason . Argument mismatch) (received . 3) (expected . 2)) ./test.mlsp 5)
