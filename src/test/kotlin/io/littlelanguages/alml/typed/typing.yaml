- scenario:
    name: Top-level declaration
    tests:
      - scenario:
          name: Value
          tests:
            - name: Literal assignments
              input: |
                let anS32 = 123;
                let aString = "Hello World";
                let aUnit = ();
                let aBool = True
              output:
                - ConstValue:
                    identifier: anS32
                    type: S32
                    expression:
                      LiteralInt: 123
                - ConstValue:
                    identifier: aString
                    type: String
                    expression:
                      LiteralString: '"Hello World"'
                - ConstValue:
                    identifier: aUnit
                    type: Unit
                    expression: LiteralUnit
                - ConstValue:
                    identifier: aBool
                    type: Bool
                    expression: "True"
            - name: Assignment with type error
              input: |
                let anS32: S32 = "Hello World"
              output:
                - UnificationFailError:
                    t1:
                      TCon:
                        name: S32
                        arguments: [ ]
                        location: 11:1:12-13:1:14
                    t2:
                      TCon:
                        name: String
                        arguments: [ ]
                        location: 17:1:18-29:1:30
      - scenario:
          name: Procedure
          tests:
            - name: Free variables and no type declarations
              input: |
                let identity a = a
              output:
                - ConstProcedure:
                    identifier: identity
                    parameters:
                      - a
                    expression: a
                    scheme: "<0> '0 -> '0"
            - name: Type declaration on parameter
              input: |
                let identity (a: String) = a
              output:
                - ConstProcedure:
                    identifier: identity
                    parameters:
                      - TypedIdentifier:
                          identifier: a
                          type: String
                    expression: a
                    scheme: "<> String -> String"
            - name: Type declaration on result
              input: |
                let identity a : String = a
              output:
                - ConstProcedure:
                    identifier: identity
                    parameters:
                      - a
                    expression: a
                    scheme: "<> String -> String"
            - name: Without free variables or type declarations
              input: |
                let add a b = a + b
              output:
                - ConstProcedure:
                    identifier: add
                    parameters:
                      - a
                      - b
                    expression:
                      BinaryOpExpression:
                        left: a
                        op: Plus
                        right: b
                    scheme: "<> S32 -> S32 -> S32"
- scenario:
    name: Expression Forms
    tests:
      - scenario:
          name: Apply
          tests:
            - name: Simple
              input: |
                let constant a = a;
                let value1 = constant 10;
                let value2 = constant "Hello"
              output:
                - ConstProcedure:
                    identifier: constant
                    parameters:
                      - a
                    expression: a
                    scheme: "<0> '0 -> '0"
                - ConstValue:
                    identifier: value1
                    type: S32
                    expression:
                      ApplyExpression:
                        - constant
                        - LiteralInt: 10
                - ConstValue:
                    identifier: value2
                    type: String
                    expression:
                      ApplyExpression:
                        - constant
                        - LiteralString: '"Hello"'
      - scenario:
          name: Block
          tests:
            - name: Single
              input: |
                let x = { 1 }
              output:
                - ConstValue:
                    identifier: x
                    type: S32
                    expression:
                      LiteralInt: 1
            - name: Multiple
              input: |
                let x = { 1; 2; 3 }
              output:
                - ConstValue:
                    identifier: x
                    type: S32
                    expression:
                      Block:
                        expressions:
                          - LiteralInt: 1
                          - LiteralInt: 2
                          - LiteralInt: 3
      - scenario:
          name: If
          tests:
            - name: With else
              input: |
                let a = 10;
                let b =
                  if a == 0 -> 1
                   | a == 1 -> 5
                  else 10
              output:
                - ConstValue:
                    identifier: a
                    type: S32
                    expression:
                      LiteralInt: 10
                - ConstValue:
                    identifier: b
                    type: S32
                    expression:
                      If:
                        if-expressions:
                          - guard:
                              BinaryOpExpression:
                                left: a
                                op: Equals
                                right:
                                  LiteralInt: 0
                            body:
                              LiteralInt: 1
                          - guard:
                              BinaryOpExpression:
                                left: a
                                op: Equals
                                right:
                                  LiteralInt: 1
                            body:
                              LiteralInt: 5
                        else-expression:
                          LiteralInt: 10
            - name: Without else
              input:
                let a = 10;
                let b =
                  if a == 0 -> 1
                   | a == 1 -> 5
              output:
                - ConstValue:
                    identifier: a
                    type: S32
                    expression:
                      LiteralInt: 10
                - ConstValue:
                    identifier: b
                    type: Unit
                    expression:
                      If:
                        if-expressions:
                          - guard:
                              BinaryOpExpression:
                                left: a
                                op: Equals
                                right:
                                  LiteralInt: 0
                            body:
                              LiteralInt: 1
                          - guard:
                              BinaryOpExpression:
                                left: a
                                op: Equals
                                right:
                                  LiteralInt: 1
                            body:
                              LiteralInt: 5
            - name: Illegal guard
              input: |
                let a = 10;
                let b =
                  if a == 0 -> 1
                   | "Hello" -> 5
                  else 10
              output:
                - UnificationFailError:
                    t1:
                      TCon:
                        name: String
                        arguments: []
                        location: 42:4:6-48:4:12
                    t2:
                      TCon:
                        name: Bool
                        arguments: []
                        location: none
            - name: Actions do not unify
              input: |
                let a = 10;
                let b =
                  if a == 0 -> "Hello"
                   | a == 1 -> 5
                  else 10
              output:
                - UnificationFailError:
                    t1:
                      TCon:
                        name: String
                        arguments: []
                        location: 35:3:16-41:3:22
                    t2:
                      TCon:
                        name: S32
                        arguments: []
                        location: 67:5:8-68:5:9
      - scenario:
          name: Lambda
          tests:
            - name: Untyped
              input: |
                let second = \a b -> b
              output:
                - ConstValue:
                    identifier: second
                    type: "'0 -> '1 -> '1"
                    expression:
                      proc:
                        parameters:
                          - a
                          - b
                        expression:
                          b
            - name: Typed
              input: |
                let second = \(a: S32) (b: S32) -> b
              output:
                - ConstValue:
                    identifier: second
                    type: "S32 -> S32 -> S32"
                    expression:
                      proc:
                        parameters:
                          - TypedIdentifier:
                              identifier: a
                              type: S32
                          - TypedIdentifier:
                              identifier: b
                              type: S32
                        expression:
                          b
            - name: Reference enclosing scope
              input: |
                let something = 10;
                let second = \a -> something
              output:
                - ConstValue:
                    identifier: something
                    type: S32
                    expression:
                      LiteralInt: 10
                - ConstValue:
                    identifier: second
                    type: "'0 -> S32"
                    expression:
                      proc:
                        parameters:
                          - a
                        expression:
                          something
      - scenario:
          name: Literal
          tests:
            - name: S32
              input: |
                let x = 123
              output:
                - ConstValue:
                    identifier: x
                    type: S32
                    expression:
                      LiteralInt: 123
            - name: String
              input: |
                let x = "Hello world"
              output:
                - ConstValue:
                    identifier: x
                    type: String
                    expression:
                      LiteralString: '"Hello world"'
            - name: Bool
              input: |
                let x = True;
                let y = False
              output:
                - ConstValue:
                    identifier: x
                    type: Bool
                    expression: "True"
                - ConstValue:
                    identifier: y
                    type: Bool
                    expression: "False"
      - scenario:
          name: LetFunction
          tests:
            - name: nested
              input: |
                let x = {
                  let double a = a + a;
                  double 10
                }
              output:
                - ConstValue:
                    identifier: x
                    type: S32
                    expression:
                      Block:
                        expressions:
                          - ConstProcedure:
                              identifier: double
                              parameters:
                                - a
                              expression:
                                BinaryOpExpression:
                                  left: a
                                  op: Plus
                                  right: a
                              scheme: "<> S32 -> S32"
                          - ApplyExpression:
                              - double
                              - LiteralInt: 10
      - scenario:
          name: LetValue
          tests:
            - name: nested
              input: |
                let x = {
                  let y = 10;
                  y * 2
                }
              output:
                - ConstValue:
                    identifier: x
                    type: S32
                    expression:
                      Block:
                        expressions:
                          - ConstValue:
                              identifier: y
                              type: S32
                              expression:
                                LiteralInt: 10
                          - BinaryOpExpression:
                              left: y
                              op: Multiply
                              right:
                                LiteralInt: 2
      - scenario:
          name: Signal
          tests:
            - name: String expression
              input: |
                let x = signal "Hello"
              output:
                - ConstValue:
                    identifier: x
                    type: "'0"
                    expression:
                      Signal:
                        expression:
                          LiteralString: '"Hello"'
            - name: Invalid expression
              input: |
                let x = signal 123
              output:
                - UnificationFailError:
                    t1:
                      TCon:
                        name: S32
                        arguments: [ ]
                        location: 15:1:16-17:1:18
                    t2:
                      TCon:
                        name: String
                        arguments: [ ]
                        location: none
      - scenario:
          name: Try
          tests:
            - name: Catch exception
              input:
                let value = 
                  try
                    (10 / 0)
                    (\e -> 0)
              output:
                - ConstValue:
                    identifier: value
                    type: S32
                    expression:
                      Try:
                        body:
                          BinaryOpExpression:
                            left:
                              LiteralInt: 10
                            op: Divide
                            right:
                              LiteralInt: 0
                        catch:
                          proc:
                            parameters:
                              - e
                            expression:
                              LiteralInt: 0
            - name: Catch exception error
              input:
                let value = 
                  try
                    (10 / 0)
                    (\e -> "oops")
              output:
                - UnificationFailError:
                    t1:
                      TCon:
                        name: S32
                        arguments: []
                        location: 17:1:18-22:1:23
                    t2:
                      TCon:
                        name: String
                        arguments: []
                        location: 32:1:33-37:1:38
