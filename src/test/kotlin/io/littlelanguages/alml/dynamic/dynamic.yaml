- name: Hello World
  input: |
    (println "Hello world")
  output:
    program:
      values: [ ]
      procedures:
        - procedure:
            name: _main
            parameters: [ ]
            depth: 0
            offsets: 0
            es:
              - call-procedure:
                  procedure:
                    external-procedure: println
                  es:
                    - [ 'Hello world' ]
                  line-number: 1
- scenario:
    name: Declaration
    tests:
      - name: Top-level constant
        input: |
          let x = 10
        output:
          program:
            values:
              - x
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - assign:
                        symbol:
                          toplevel-value: x
                        es:
                          - 10
      - name: Top-level procedure
        input: |
          let add a b = a + b
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: add
                  parameters:
                    - a
                    - b
                  depth: 0
                  offsets: 2
                  es:
                    - binary-op-expression:
                        left:
                          - parameter:
                              name: a
                              depth: 0
                              offset: 0
                        op: Plus
                        right:
                          - parameter:
                              name: b
                              depth: 0
                              offset: 1
                        line-number: 1
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es: [ ]
      - name: Procedure with duplicate parameter names
        input: |
          let add a a = a + a
        output:
          - DuplicateParameterNameError:
              name: a
              location: "10:1:11"
      - name: Values within a procedure
        input: |
          let double-sum a b = {
            let sum = a + b;
            sum + sum
          }
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: double-sum
                  parameters:
                    - a
                    - b
                  depth: 0
                  offsets: 3
                  es:
                    - assign:
                        symbol:
                          procedure-value:
                            name: sum
                            depth: 0
                            offset: 2
                        es:
                          - binary-op-expression:
                              left:
                                - parameter:
                                    name: a
                                    depth: 0
                                    offset: 0
                              op: Plus
                              right:
                                - parameter:
                                    name: b
                                    depth: 0
                                    offset: 1
                              line-number: 2
                    - binary-op-expression:
                        left:
                          - procedure-value:
                              name: sum
                              depth: 0
                              offset: 2
                        op: Plus
                        right:
                          - procedure-value:
                              name: sum
                              depth: 0
                              offset: 2
                        line-number: 3
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es: [ ]
      - name: Nested procedures with free variables
        input: |
          let f a b = {
              let sum = a + b;

              let g x = {
                  let sum2 = a + b + sum;

                  sum2 + x
              };

              (g sum)
          };

          (println (f 1 2))
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: f
                  parameters:
                    - a
                    - b
                  depth: 0
                  offsets: 3
                  es:
                    - assign:
                        symbol:
                          procedure-value:
                            name: sum
                            depth: 0
                            offset: 2
                        es:
                          - binary-op-expression:
                              left:
                                - parameter:
                                    name: a
                                    depth: 0
                                    offset: 0
                              op: Plus
                              right:
                                - parameter:
                                    name: b
                                    depth: 0
                                    offset: 1
                              line-number: 2
                    - procedure:
                        name: g
                        parameters:
                          - x
                        depth: 1
                        offsets: 2
                        es:
                          - assign:
                              symbol:
                                procedure-value:
                                  name: sum2
                                  depth: 1
                                  offset: 1
                              es:
                                - binary-op-expression:
                                    left:
                                      - binary-op-expression:
                                          left:
                                            - parameter:
                                                name: a
                                                depth: 0
                                                offset: 0
                                          op: Plus
                                          right:
                                            - parameter:
                                                name: b
                                                depth: 0
                                                offset: 1
                                          line-number: 5
                                    op: Plus
                                    right:
                                      - procedure-value:
                                          name: sum
                                          depth: 0
                                          offset: 2
                                    line-number: 5
                          - binary-op-expression:
                              left:
                                - procedure-value:
                                    name: sum2
                                    depth: 1
                                    offset: 1
                              op: Plus
                              right:
                                - parameter:
                                    name: x
                                    depth: 1
                                    offset: 0
                              line-number: 7
                    - call-procedure:
                        procedure:
                          declared-procedure:
                            name: g
                            parameter-count: 1
                            depth: 1
                        es:
                          - - procedure-value:
                                name: sum
                                depth: 0
                                offset: 2
                        line-number: 10
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - call-procedure:
                        procedure:
                          external-procedure: println
                        es:
                          - - call-procedure:
                                procedure:
                                  declared-procedure:
                                    name: f
                                    parameter-count: 2
                                    depth: 0
                                es:
                                  - - 1
                                  - - 2
                                line-number: 13
                        line-number: 13
      - name: Lambda function without free variables
        input: |
          (\a b c -> a + b * b + c * c 1 2 3)
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - call-value:
                        operand:
                          - procedure:
                              name: __n0
                              parameters:
                                - a
                                - b
                                - c
                              depth: 0
                              offsets: 3
                              es:
                                - binary-op-expression:
                                    left:
                                      - binary-op-expression:
                                          left:
                                            - parameter:
                                                name: a
                                                depth: 0
                                                offset: 0
                                          op: Plus
                                          right:
                                            - binary-op-expression:
                                                left:
                                                  - parameter:
                                                      name: b
                                                      depth: 0
                                                      offset: 1
                                                op: Multiply
                                                right:
                                                  - parameter:
                                                      name: b
                                                      depth: 0
                                                      offset: 1
                                                line-number: 1
                                          line-number: 1
                                    op: Plus
                                    right:
                                      - binary-op-expression:
                                          left:
                                            - parameter:
                                                name: c
                                                depth: 0
                                                offset: 2
                                          op: Multiply
                                          right:
                                            - parameter:
                                                name: c
                                                depth: 0
                                                offset: 2
                                          line-number: 1
                                    line-number: 1
                          - declared-procedure:
                              name: __n0
                              parameter-count: 3
                              depth: 0
                        es:
                          - 1
                          - 2
                          - 3
- scenario:
    name: Identifier Reference
    tests:
      - name: Unknown value identifier
        input: |
          (println x)
        output:
          - UnknownSymbolError:
              name: x
              location: "9:1:10"
      - name: Unknown procedure identifier
        input: |
          (println (add 1 2))
        output:
          - UnknownSymbolError:
              name: add
              location: 10:1:11-12:1:13
      - name: Top-level value
        input: |
          let x = 10;

          (println x)
        output:
          program:
            values:
              - x
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - assign:
                        symbol:
                          toplevel-value: x
                        es:
                          - 10
                    - call-procedure:
                        procedure:
                          external-procedure: println
                        es:
                          - - toplevel-value: x
                        line-number: 3
      - name: Multiple top-level values
        input: |
          let v1 = 1;
          let v2 = "Hello world";

          (println v1 v2)
        output:
          program:
            values:
              - v1
              - v2
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - assign:
                        symbol:
                          toplevel-value: v1
                        es:
                          - 1
                    - assign:
                        symbol:
                          toplevel-value: v2
                        es:
                          - Hello world
                    - call-procedure:
                        procedure:
                          external-procedure: println
                        es:
                          - - toplevel-value: v1
                          - - toplevel-value: v2
                        line-number: 4
      - name: Top-level procedure
        input: |
          let add a b = a + b;

          (println (add 1 2))
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: add
                  parameters:
                    - a
                    - b
                  depth: 0
                  offsets: 2
                  es:
                    - binary-op-expression:
                        left:
                          - parameter:
                              name: a
                              depth: 0
                              offset: 0
                        op: Plus
                        right:
                          - parameter:
                              name: b
                              depth: 0
                              offset: 1
                        line-number: 1
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - call-procedure:
                        procedure:
                          external-procedure: println
                        es:
                          - - call-procedure:
                                procedure:
                                  declared-procedure:
                                    name: add
                                    parameter-count: 2
                                    depth: 0
                                es:
                                  - - 1
                                  - - 2
                                line-number: 3
                        line-number: 3
      - name: Top-level procedure with incorrect number of arguments
        input: |
          let add a b = a + b;

          (println (add));
          (println (add 1));
          (println (add 1 2 3))
        output:
          - ArgumentMismatchError:
              name: add
              expected: 2
              actual: 0
              location: 31:3:10-35:3:14
          - ArgumentMismatchError:
              name: add
              expected: 2
              actual: 1
              location: 48:4:10-54:4:16
          - ArgumentMismatchError:
              name: add
              expected: 2
              actual: 3
              location: 67:5:10-77:5:20
      - name: Local forward declaration
        input: |
          let a = 9;

          let f = {
              let v1 = a;
              let a = 10;
              let v2 = a;
              v1 + v2
          }
        output:
          program:
            values:
              - a
              - f
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 3
                  es:
                    - assign:
                        symbol:
                          toplevel-value: a
                        es:
                          - 9
                    - assign:
                        symbol:
                          toplevel-value: f
                        es:
                          - assign:
                              symbol:
                                procedure-value:
                                  name: v1
                                  depth: 0
                                  offset: 0
                              es:
                                - toplevel-value: a
                          - assign:
                              symbol:
                                procedure-value:
                                  name: a
                                  depth: 0
                                  offset: 1
                              es:
                                - 10
                          - assign:
                              symbol:
                                procedure-value:
                                  name: v2
                                  depth: 0
                                  offset: 2
                              es:
                                - procedure-value:
                                    name: a
                                    depth: 0
                                    offset: 1
                          - binary-op-expression:
                              left:
                                - procedure-value:
                                    name: v1
                                    depth: 0
                                    offset: 0
                              op: Plus
                              right:
                                - procedure-value:
                                    name: v2
                                    depth: 0
                                    offset: 2
                              line-number: 7
      - name: Top-level declaration with embedded declaration
        input: |
          let a = { let b = 1
                  ; b + 1
                  }
        output:
          program:
            values:
              - a
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 1
                  es:
                    - assign:
                        symbol:
                          toplevel-value: a
                        es:
                          - assign:
                              symbol:
                                procedure-value:
                                  name: b
                                  depth: 0
                                  offset: 0
                              es:
                                - 1
                          - binary-op-expression:
                              left:
                                - procedure-value:
                                    name: b
                                    depth: 0
                                    offset: 0
                              op: Plus
                              right:
                                - 1
                              line-number: 2
      - name: Top-level declaration with embedded replacement declaration
        input: |
          let b = 1;
          let a = { let b = 10;
                    b + 1
                  };
          let c = b
        output:
          program:
            values:
              - b
              - a
              - c
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 1
                  es:
                    - assign:
                        symbol:
                          toplevel-value: b
                        es:
                          - 1
                    - assign:
                        symbol:
                          toplevel-value: a
                        es:
                          - assign:
                              symbol:
                                procedure-value:
                                  name: b
                                  depth: 0
                                  offset: 0
                              es:
                                - 10
                          - binary-op-expression:
                              left:
                                - procedure-value:
                                    name: b
                                    depth: 0
                                    offset: 0
                              op: Plus
                              right:
                                - 1
                              line-number: 3
                    - assign:
                        symbol:
                          toplevel-value: c
                        es:
                          - toplevel-value: b
- scenario:
    name: Exceptions
    tests:
      - name: signal
        input: |
          (signal "hello world")
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - signal:
                        - hello world
      - name: try-catch
        input: |
          (try
            "hello world"
            \c -> "cool"
          )
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: __n0
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - hello world
              - procedure:
                  name: __n1
                  parameters:
                    - c
                  depth: 0
                  offsets: 1
                  es:
                    - "cool"
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es:
                    - try:
                        body:
                          declared-procedure:
                            name: __n0
                            parameter-count: 0
                            depth: 0
                        catch:
                          declared-procedure:
                            name: __n1
                            parameter-count: 1
                            depth: 0
      - name: try-catch with bindings
        input: |
          let safe-divide a b = 
            (try
              { let a2 = a + a;
                a2 / b
              }
              \c -> 0
            )
          )
        output:
          program:
            values: [ ]
            procedures:
              - procedure:
                  name: safe-divide
                  parameters:
                    - a
                    - b
                  depth: 0
                  offsets: 2
                  es:
                    - procedure:
                        name: __n0
                        parameters: [ ]
                        depth: 1
                        offsets: 1
                        es:
                          - assign:
                              symbol:
                                procedure-value:
                                  name: a2
                                  depth: 1
                                  offset: 0
                              es:
                                - binary-op-expression:
                                    left:
                                      - parameter:
                                          name: a
                                          depth: 0
                                          offset: 0
                                    op: Plus
                                    right:
                                      - parameter:
                                          name: a
                                          depth: 0
                                          offset: 0
                                    line-number: 3
                          - binary-op-expression:
                              left:
                                - procedure-value:
                                    name: a2
                                    depth: 1
                                    offset: 0
                              op: Divide
                              right:
                                - parameter:
                                    name: b
                                    depth: 0
                                    offset: 1
                              line-number: 4
                    - procedure:
                        name: __n1
                        parameters:
                          - c
                        depth: 1
                        offsets: 1
                        es:
                          - 0
                    - try:
                        body:
                          declared-procedure:
                            name: __n0
                            parameter-count: 0
                            depth: 1
                        catch:
                          declared-procedure:
                            name: __n1
                            parameter-count: 1
                            depth: 1
              - procedure:
                  name: _main
                  parameters: [ ]
                  depth: 0
                  offsets: 0
                  es: [ ]
      - name: try-catch error
        input: |
          (try
            "hello world"
            "cool"
          )
        output:
          - ExpressionNotProcedureError: "23:3:3-28:3:8"
